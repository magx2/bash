#!/bin/bash
echo $'    
    __                    __         __     __               __                                           ___ 
   / /   ____  ____ _____/ /__  ____/ /    / /_  ____ ______/ /_  __________   ____ ___  ____ _____ __  _|__ \
  / /   / __ \/ __ `/ __  / _ \/ __  /    / __ \/ __ `/ ___/ __ \/ ___/ ___/  / __ `__ \/ __ `/ __ `/ |/_/_/ /
 / /___/ /_/ / /_/ / /_/ /  __/ /_/ /  _ / /_/ / /_/ (__  ) / / / /  / /__   / / / / / / /_/ / /_/ />  </ __/ 
/_____/\____/\__,_/\__,_/\___/\__,_/  (_)_.___/\__,_/____/_/ /_/_/   \___/  /_/ /_/ /_/\__,_/\__, /_/|_/____/ 
                                                                                            /____/            
'

# Aliases for fast moving around folders
alias ..="cd .."
alias ..2="cd ../.."
alias ..3="cd ../../.."
alias ..4="cd ../../../.."
alias ..5="cd ../../../../.."

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

alias cd..="cd .."
alias cd...="cd ../.."
alias cd....="cd ../../.."
alias cd.....="cd ../../../.."
alias cd......="cd ../../../../.."

# Creating folder and going into
function mkdircd () { 
    mkdir -p "$@" && eval cd "\"\$$#\""; 
}

# finding process with given parameter
pf() {
    ps -aux | grep $(get_grep_string $1)
}

# killing process with PID
murder() {
        kill -9 $1      
}

get_grep_string() {
    local in=$1
    local first=${in:0:1}
    local rest=${in:1}

    echo "[$first]$rest"
}

# Killing processes by name
murderf() {
    local grep_string=$(get_grep_string $1)
    local pid=$(ps aux | grep $grep_string | awk '{print $2}')
    if [ -n "$pid" ]; then
        murder $pid
        echo "Zabilem [$pid:$grep_string]"
    else
        echo "Brak procesu o nazwie [$grep_string]"
    fi
}

# GIT
alias unstash="git stash apply"
alias stash="git stash"

# GIT propmt
# export PS1='${debian_chroot:+($debian_chroot)}\u:\w$(__git_ps1 " |%s|")\$ '
# export GIT_PS1_SHOWDIRTYSTATE=asdf

# Extracting files
extract () {
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
}


alias c=clear

health_check() {
	while [[ $# > 0 ]]
	do
	key="$1"

	case $key in
	    --url)
	    shift # past argument
	    local url=$1
	    ;;
	    --token)
	    shift # past argument
	    local token=$1
	    ;;
	esac
	shift # past argument or value
	done

	if [ -z "$url" ]; then echo "Please set URL via --url <url> option!"; return 1; fi
	if [ -z "$token" ]; then echo "Please set Pushbullet token via --token <token> option!"; return 2; fi

	local response_code=$(curl -s -o /dev/null -w "%{http_code}" $url)

	if [[ ! "$response_code" == 2* ]] && [[ ! "$response_code" == 3* ]];
	then
		curl -s -u $token: https://api.pushbullet.com/v2/pushes -d type=note -d title="Fuckup - $url" -d body="Site is not online! Returned code equals $response_code!" > /dev/null
		return $response_code
	fi
}
